(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

SupAPI.registerPlugin("typescript", "Sup.MathPlus", {
    defs: "declare module Sup {\r\n\r\n  module MathPlus {\r\n\r\n    function toString();\r\n\r\n    function integer(value: number): boolean;\r\n    function PGCD(a: number, b: number): number;\r\n    function trunc(n: number): number;\r\n    function PHI();\r\n    function pyth(a: number, b: number): number;\r\n\r\n    function Ec(m: number, v: number): number;\r\n    function fibonacci(n: number): number;\r\n    function rad(value: number): number;\r\n    function deg(value: number): number;\r\n    function grad(value: number): number;\r\n\r\n    function erf(x: number): number;\r\n    function mix(x: number, y: number, a: number): number;\r\n    function sng(x: number): number;\r\n\r\n    function smoothstep(edge0: number, edge1: number, x: number): number;\r\n    function smootherstep(edge0: number, edge1: number, x: number): number;\r\n\r\n    function reverse(t: number[]): number[];\r\n    function tobits(value: number): number;\r\n\r\n    function acoth(x: number): number;\r\n    function coth(x: number): number;\r\n    function sech(x: number): number;\r\n    function cosech(x: number): number;\r\n\r\n    module Equation {\r\n\r\n      function delta(a: number, b: number, c:number): number;\r\n\r\n    }\r\n\r\n    class Vector2 {\r\n      static right(): Vector2;\r\n      static left(): Vector2;\r\n      static up(): Vector2;\r\n      static down(): Vector2;\r\n      static one(): Vector2;\r\n\r\n      x: number;\r\n      y: number;\r\n\r\n      constructor(x?: number, y?: number);\r\n      set(x: number, y: number): Vector2;\r\n      copy(v: Vector2): Vector2;\r\n      copy(v: {x: number; y: number;}): Vector2;\r\n      clone(): Vector2;\r\n\r\n      add(v: Vector2): Vector2;\r\n      add(x: number, y: number): Vector2;\r\n      subtract(v: Vector2): Vector2;\r\n      subtract(x: number, y: number): Vector2;\r\n      multiplyScalar(m: number): Vector2;\r\n      cross(v: Vector2): Vector2;\r\n      dot(v: Vector2): number;\r\n      normalize(): Vector2;\r\n      lerp(v: Vector2, t: number): Vector2;\r\n      length(): number;\r\n      distanceTo(v: Vector2): number;\r\n      angleTo(v: Vector2): number;\r\n      unproject(camera: Camera): Vector2;\r\n    }\r\n  }\r\n\r\n}\r\n",
    code: "module Sup {\n\n  var tmpVector2 = new SupEngine.THREE.Vector2();\n\n  export module MathPlus {\n\n    export function integer(value) {\n      if (value==window.Math.floor(value)) {\n        return true;\n      }\n      else{\n        return false;\n      }\n    }\n\n    export function PGCD(a, b) {\n      let x = a;\n      let y = b;\n\n      while (y > 1) {\n        x = y;\n        y =  x % y;\n      }\n\n      return x;\n    }\n\n    export function trunc(n) {\n      if (n < 0) {\n        return window.Math.ceil(n);\n      }\n      else {\n        return window.Math.floor(n);\n      }\n    }\n\n    export function PHI() {\n      return (window.Math.sqrt(5)+1)/2;\n    }\n\n    export function pyth(a, b) {\n      return window.Math.sqrt(window.Math.pow(a, 2)+window.Math.pow(b, 2));\n    }\n\n    export function Ec(m, v) {\n      let Ecin = 1 / 2 * m * window.Math.pow(v, 2);\n      return Ecin;\n    }\n\n    export function fibonacci(n) {\n      let tab:number[] = [];\n      tab[1] = 1;\n      tab[2] = 1;\n\n      for (let i = 0; i < 3; i++){\n        tab[i] = tab[i-1] + tab[i-2];\n      }\n      return tab[n];\n    }\n\n    export function rad(value){\n      return value*window.Math.PI/180;\n    }\n\n    export function deg(value){\n      return value*180/window.Math.PI;\n    }\n\n    export function grad(value) {\n      return value/(10/9);\n    }\n\n    export function erf(x) {\n      if (x !=null) {\n        return 2/window.Math.sqrt(window.Math.PI)*(x-(window.Math.pow(x, 3)/3)+(window.Math.pow(x, 5)/10)-(window.Math.pow(x, 7)/42)+(window.Math.pow(x, 9)));\n      }\n      else {\n        throw new Error(\"Error x must be a number\");\n      }\n    }\n\n    export function mix(x, y, a) {\n      return (x+(y-x)*a);\n    }\n\n    export function sng(x) {\n      if (x > 0) {\n        return 1;\n      }\n      else if (x < 0) {\n        return -1;\n      }\n      else {\n        return 0;\n      }\n    }\n\n    export function smoothstep(edge0, edge1, x) {\n      let clamp = window.Math.max(0 , window.Math.min(1, (x-edge0) / (edge1 - edge0)) );\n      return clamp*clamp*(3-2*clamp);\n    }\n\n    export function smootherstep(edge0, edge1, x) {\n      let clamp = window.Math.max(0 , window.Math.min(1, (x-edge0) / (edge1 - edge0)) );\n      return clamp*clamp*clamp*(clamp*(clamp*6 - 15) + 10);\n    }\n\n    /*export function reverse(t) {\n      let nt:number[] = [];\n      let size = t.length;\n\n      for (i in t) {\n        nt[size - i] = t[i];\n      }\n      return nt;\n    }\n\n    export function tobits(value) {\n      let t = new Array();\n\n      while (value > 0) {\n        let rest = value%2;\n        t[t.length+1] = rest;\n        value = (value-rest)/2;\n      }\n      t = t.reverse();\n      t = t.toString();\n      t = t.join(\"\");\n      t = parseFloat(t);\n      return t;\n    }*/\n\n    export function acoth(x) {\n      return 1/2*window.Math.log((x+1)/(x-1));\n    }\n\n    export function coth(x) {\n      return window.Math.cosh(x)/window.Math.sinh(x);\n    }\n\n    export function sech(x){\n      return 1/window.Math.coth(x);\n    }\n\n    export function cosech(x) {\n      return 1/window.Math.sech(x);\n    }\n\n    export module Equation {\n\n      export function delta(a, b, c) {\n        return window.Math.pow(b, 2)-4*a*c;\n      }\n\n      /*export function secDegres(a, b, c) {\n        let delt = Swindow.Math.pow(b, 2)-4*a*c;\n\n        if (delt == 0) {\n          return (-b)/(2*a);\n        }\n        else if (delt > 0) {\n          let x1 = ((-b) - window.Math.sqrt(delt))/(2*a);\n          let x2 = ((-b) + window.Math.sqrt(delt))/(2*a);\n\n          return x1;\n        }\n        else {\n          return \"There is no solution\";\n        }\n      }*/\n    }\n\n    export function toString() {\n      console.log(\"[Sup.MathPlus] plugin correctly installed.\")\n    }\n\n    export class Vector2 {\n      static right()   { return new Vector2( 1,  0); }\n      static left()    { return new Vector2(-1,  0); }\n      static up()      { return new Vector2( 0,  1); }\n      static down()    { return new Vector2( 0, -1); }\n      static one()     { return new Vector2( 1,  1); }\n\n      x: number;\n      y: number;\n\n      constructor(x, y) {\n        this.x = (x) ? x : 0;\n        this.y = (y) ? y : 0;\n      }\n\n      set(x, y) { this.x = x; this.y = y; return this; }\n      copy(v) { this.x = v.x; this.y = v.y; return this; }\n      clone() { return new Vector2(this.x, this.y); }\n\n      add(x, y) {\n        if (y == null) {\n          let v = x;\n          this.x += v.x;\n          this.y += v.y;\n        }\n        else {\n          this.x += x;\n          this.y += y;\n        }\n        return this;\n      }\n\n      substract(x, y) {\n        if (y == null) {\n          let v = x;\n          this.x -= v.x;\n          this.y -= v.y;\n        }\n        else {\n          this.x -= x;\n          this.y -= y;\n        }\n        return this;\n      }\n\n      multiplyScalar(m) { this.x *= m; this.y *= m; return this; }\n\n      cross(v) {\n        var x = this.x;\n        var y = this.y;\n\n        this.x = y* v.y;\n        this.y = v.x - x;\n        return this;\n      }\n\n      dot(v) { return this.x * v.x + this.y * v.y; }\n\n      normalize() {\n        var length = this.length()\n        this.x /= length; this.y /= length;\n        return this;\n      }\n\n      lerp(v, t) {\n        this.x = this.x * (1 - t) + v.x * t;\n        this.y = this.y * (1 - t) + v.y * t;\n        return this;\n      }\n\n      length() { return window.Math.sqrt(this.x * this.x + this.y * this.y); }\n      distanceTo(v) { return v.clone().subtract(this).length(); }\n      angleTo(v) {\n        var theta = this.dot( v ) / ( this.length() * v.length() );\n\t\t    return window.Math.acos( Math.clamp( theta, - 1, 1 ) );\n      }\n\n      unproject(camera) {\n        tmpVector2.set(this.x, this.y);\n        tmpVector2.unproject(camera.__inner.threeCamera);\n        this.set(tmpVector2.x, tmpVector2.y);\n        return this;\n     }\n\n    }\n  }\n}\n",
});

},{}]},{},[1]);
